setState()更新状态的2种写法：
    1)setState(updater,[callback]), //[]表示可以省略
        updater为返回stateChange对象的函数：(state,props)=>stateChange
        接收的state和props被保证为最新的

        示例：
        state = {
            count : 1,
            index : this.props.index
        }
        update=()=>{
            this.setState((state,props)=>({ //如果state和props都发生了变化
                count ：state.count + 1,
                index : props.index + 1,
            })) 

            this.setState(state=>({ //如果props没变化
                count ：state.count + 1,
            })) 
        }
    2)setState(stateChange,[callback])
        stateChange为对象
        callback是可选的回调函数，在状态更新且界面更新后才执行

        示例：
        state = {
            count : 1,
            index : this.props.index
        }
        update=()=>{
            const count = this.state.count + 1 ;
            this.setState({
                count
            },()=>{
                console.log('this.state.count',this.state.count)
                //在此处打印可输出最新的count状态值，该函数在状态更新且界面更新后才执行
            }) 
            console.log('this.state.count',this.state.count)//在此处打印无法输出最新的count状态值，有延迟
        }
    总结：
        对象方式是函数方式的简写
            如果新状态不依赖于原状态===》使用对象方式
            如果新状态依赖于原状态===》使用函数方式
        如果需要在setState()后获取最新的状态数据，在第二个callback函数中读取