1、Component存在的问题？
    1)父组件重新render(),子组件(当前组件)也会重新执行render()，即使没有任何变化
    2)当前组件setState(),重新执行render(),即使state没有任何变化


2、解决Component存在的问题
    1)原因：组件的ShouldcomponentUpdate()默认返回值为true,即使数据没有变化，render()都会重新执行；
    2)办法1：重写shouldComponentUpdate()，判断如果数据有变化返回true，否则返回false
    3)办法2：使用PureComponent代替Component
    4)说明：一般都使用PureComponent来优化组件性能

3、PureComponent的基本原理
    1)重写实现shouldComponentUpdate()
    2)对组件的新/旧state和props中的数据进行浅比较，如果都没有变化，返回false，否则返回true
    3)一旦shouldComponentUpdate()返回false,不再执行用于更新的render();

4、面试题：
    组件的哪个生命周期钩子能实现组件优化？shouldComponentUpdate()
    PureComponent的原理？
    区别PureComponent和Component？

示例1：
    //父组件
    class A extends React.Component{
        state = {
            //m1 : 1,  
            m1 : {count : 1}
        }

        update1=()=>{
            /*//函数写法
            this.setState(state=>({
                //m1 : state.m1+1
                m1 : {count : state.m1.count + 1}
            }))*/ //当父组件setState的时候，即使子组件和父组件无关，也会render一次

            //对象写法
            const m1 = this.state.m1;
            m1.count = 2 ; //没有改变m1对象，仅内部值发生了改变，m1本身没有变
            this.setState({
                //m1,  //只改变状态对象内部数据，对象不变，子组件就不会重新render
                m1 : {...m1} , //这样是重新创建一个新的对象，子组件会重新render
            })
        }

        render(){
            return(
                <div>
                    <h2>A组件：m1 = {this.state.m1.count}</h2>
                    <Button onClick={this.update1}>测试A</Button>
                    <B m1={this.state.m1}/>
                </div>
            )
        }
    }
    //子组件
    class B extends React.Component{
        state = {
            m2 : 0
        }
        
        //1、shouldComponentUpdate:用来决定当前组件是否应该重新render(),如果返回true重新render，否则结束
        ShouldcomponentUpdate(nextProps, nextState){
            //比较新旧props中的和state的数据，如果没有一个变化的返回false，否则返回true
            if(this.props.m1===nextProps.m1&&this.state.m2===nextState.m2){
                return false;
            }else{
                return true; //默认true
            }
        }  //PureComponent相当于对shouldComponentUpdate重写并进行浅比较

        update2=()=>{
            /*
            this.setState(state=>({
                m2 : state.m2+1
            }))*/

            this.setState({})//即使此时m2并没有发生生变化，但也会render一次
        }

        render(){
            return(
                <div>
                    <h2>B组件：m2 = {this.state.m2},m1={this.props.m1.count}</h2>
                    <Button onClick={this.update2}>测试B</Button>
                </div>
            )
        }
    }

    ReactDOM.render(<A/>,document.getElementById('root'))
